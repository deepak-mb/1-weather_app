{"version":3,"sources":["components/Layout/Header.js","components/Layout/Image.js","components/Layout/Input.js","components/Layout/Button.js","components/Layout/WeatherTable.js","components/Layout/Error.js","components/Layout/WeatherForm.js","components/Layout/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","Image","src","alt","style","maxWidth","Input","props","type","name","placeholder","value","onChange","Button","field","WeatherTable","city","country","temperature","humidity","description","iconID","concat","Error","message","WeatherForm","state","error","e","_this","setState","Object","defineProperty","target","onSubmit","preventDefault","_this$state","getWeather","_callee","regenerator_default","wrap","_context","prev","next","axios","get","process","then","response","data","main","temp","weather","icon","catch","err","stop","_this$state2","this","Layout_Input","Layout_Button","Layout_WeatherTable","Layout_Error","Component","Weather","Layout_WeatherForm","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e644b744.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#!\">\n        Weather App\n      </a>\n    </nav>\n  );\n}\n","import React from \"react\";\n\nexport default function Image() {\n  return (\n    <div>\n      <img\n        src=\"https://66.media.tumblr.com/db3b68e5ccc2ebe25094b1e4c92aa0e2/tumblr_n0acluDfP31r5h04to1_500.gif\"\n        alt=\"Mountains\"\n        style={{ maxWidth: \"100%\" }}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst Input = props => {\n  const { type, name, placeholder, value, onChange } = props;\n  return (\n    <input\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      className=\"my-2 d-block\"\n    />\n  );\n};\n\nexport default Input;\n","import React from \"react\";\n\nconst Button = props => {\n  const { field } = props;\n  return <button className=\"btn btn-dark btn-block mx-2\" style={{maxWidth: \"150px\"}}>{field}</button>;\n};\n\nexport default Button;\n","// (valNum-32)/1.8\n\nimport React from \"react\";\nimport axios from \"axios\";\n\nconst WeatherTable = props => {\n  const { city, country, temperature, humidity, description, iconID } = props;\n\n  return (\n    <div className=\"my-2\">\n      <table>\n        <tbody>\n          <tr>\n            <td>City:</td>\n            <td>{city}</td>\n          </tr>\n          <tr>\n            <td>Country:</td>\n            <td>{country}</td>\n          </tr>\n          <tr>\n            <td>Temperature:</td>\n            <td>{temperature}</td>\n          </tr>\n          <tr>\n            <td>Humidity:</td>\n            <td>{humidity}</td>\n          </tr>\n          <tr>\n            <td>Description:</td>\n            <td className=\"desc mr-2\">{description}</td>\n            <td>\n              <img\n                src={`http://openweathermap.org/img/w/${iconID}.png`}\n                alt=\"Weather Icon\"\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default WeatherTable;\n","import React from \"react\";\n\nconst Error = props => {\n  return (\n    <div>\n      <h5 className=\"text-danger my-2\">{props.message}</h5>\n    </div>\n  );\n};\n\nexport default Error;\n","import React, { Component } from \"react\";\nimport Input from \"./Input\";\nimport Button from \"./Button\";\nimport axios from \"axios\";\nimport WeatherTable from \"./WeatherTable\";\nimport Error from \"./Error\";\n// console.log(process.env.REACT_APP_DEEPAK_WEATHER_API_KEY);\n\nclass WeatherForm extends Component {\n  state = {\n    city: \"\",\n    country: \"\",\n    temperature: \"\",\n    humidity: \"\",\n    description: \"\",\n    iconID: \"\",\n    error: \"\"\n  };\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    if (this.state.city === \"\" || this.state.country === \"\") {\n      this.setState({\n        error: \"Please enter the city and country.\"\n      });\n    } else {\n      const { city, country } = this.state;\n      this.getWeather(city, country);\n    }\n  };\n\n  // onClear = (e) => {\n  //   e.preventDefault();\n  //   this.setState({\n  //     city: \"\",\n  //     country: \"\",\n  //     temperature: \"\",\n  //     humidity: \"\",\n  //     description: \"\",\n  //     error: \"\"\n  //   });\n  // };\n\n  getWeather = async (city, country) => {\n    await axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${\n          process.env.REACT_APP_DEEPAK_WEATHER_API_KEY\n        }&units=imperial`\n      )\n      .then(response => {\n        // console.log(response);\n        this.setState({\n          temperature: response.data.main.temp,\n          humidity: response.data.main.humidity,\n          description: response.data.weather[0].description,\n          iconID: response.data.weather[0].icon,\n          error: null\n        });\n      })\n      .catch(err => {\n        if (err) {\n          this.setState({\n            city: \"\",\n            country: \"\",\n            temperature: \"\",\n            humidity: \"\",\n            description: \"\",\n            iconID: \"\",\n            error: \"Please enter the correct city and country.\"\n          });\n        }\n      });\n  };\n\n  render() {\n    const {\n      city,\n      country,\n      temperature,\n      humidity,\n      description,\n      iconID,\n      error\n    } = this.state;\n    return (\n      <div>\n        <div>\n          <h5>Enter city and Country</h5>\n          <form onSubmit={this.onSubmit}>\n            <Input\n              type=\"text\"\n              name=\"city\"\n              placeholder=\"City\"\n              value={city}\n              onChange={this.onChange}\n            />\n            <Input\n              type=\"text\"\n              name=\"country\"\n              placeholder=\"Country\"\n              value={country}\n              onChange={this.onChange}\n            />\n            <Button field=\"Get Weather\" />\n            {/* <Button field=\"Clear\" onClick={this.onClear} /> */}\n          </form>\n        </div>\n        <div className=\"col-12 p-0\">\n          {temperature ? (\n            <WeatherTable\n              city={city}\n              country={country}\n              temperature={temperature}\n              humidity={humidity}\n              description={description}\n              iconID={iconID}\n            />\n          ) : null}\n          {error ? <Error message={error} /> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WeatherForm;\n","import React from \"react\";\nimport Image from \"./Image.js\";\nimport WeatherForm from \"./WeatherForm.js\";\nexport default function Weather() {\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6\">\n            <Image />\n          </div>\n          <div className=\"col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6\">\n            <WeatherForm />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Layout/Header\";\nimport Weather from \"./components/Layout/Weather\";\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Header />\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}